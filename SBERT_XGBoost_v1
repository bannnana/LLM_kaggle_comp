{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":86518,"databundleVersionId":9809560,"sourceType":"competition"},{"sourceId":12296094,"sourceType":"datasetVersion","datasetId":7749993}],"dockerImageVersionId":31040,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-29T18:37:07.167674Z","iopub.execute_input":"2025-06-29T18:37:07.167877Z","iopub.status.idle":"2025-06-29T18:37:07.182582Z","shell.execute_reply.started":"2025-06-29T18:37:07.167851Z","shell.execute_reply":"2025-06-29T18:37:07.181784Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/llm-classification-finetuning/sample_submission.csv\n/kaggle/input/llm-classification-finetuning/train.csv\n/kaggle/input/llm-classification-finetuning/test.csv\n/kaggle/input/sentencetransformer/config.json\n/kaggle/input/sentencetransformer/README.md\n/kaggle/input/sentencetransformer/tokenizer.json\n/kaggle/input/sentencetransformer/tokenizer_config.json\n/kaggle/input/sentencetransformer/sentence_bert_config.json\n/kaggle/input/sentencetransformer/__huggingface_repos__.json\n/kaggle/input/sentencetransformer/config_sentence_transformers.json\n/kaggle/input/sentencetransformer/model.safetensors\n/kaggle/input/sentencetransformer/modules.json\n/kaggle/input/sentencetransformer/special_tokens_map.json\n/kaggle/input/sentencetransformer/vocab.txt\n/kaggle/input/sentencetransformer/1_Pooling/config.json\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"TO DO\n\n- calculate cosine similarity\n- calculate (absolute) difference between prompt vs embedding, and joint embeddings\n- create feature matrix (concatenate and flatten vectors)\n- set up ML pipeline","metadata":{}},{"cell_type":"markdown","source":"### Project plan\n\n1. Preprocessing\n   - clean text (remove stopwords etc)\n   - lemmatisation\n   - option 1: spaCy\n     \n3. Embedding\n    - option1: SentenceBERT\n    - cosine similarity\n    - mean abs difference in vectors --> can also try full abs diff vector\n      \n5. Train ML model\n    - option 1: XGBoost\n      \n7. Evaluate\n    - log loss","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport spacy\nfrom sentence_transformers import SentenceTransformer\nfrom sklearn.metrics.pairwise import cosine_similarity","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T18:37:07.184322Z","iopub.execute_input":"2025-06-29T18:37:07.185018Z","iopub.status.idle":"2025-06-29T18:37:38.052518Z","shell.execute_reply.started":"2025-06-29T18:37:07.185000Z","shell.execute_reply":"2025-06-29T18:37:38.051750Z"}},"outputs":[{"name":"stderr","text":"2025-06-29 18:37:24.743783: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1751222244.925940      35 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1751222244.982313      35 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"train_df = pd.read_csv(\"/kaggle/input/llm-classification-finetuning/train.csv\")\ntest_df = pd.read_csv(\"/kaggle/input/llm-classification-finetuning/test.csv\")\n\ntrain_df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T18:37:38.053374Z","iopub.execute_input":"2025-06-29T18:37:38.053842Z","iopub.status.idle":"2025-06-29T18:37:41.914701Z","shell.execute_reply.started":"2025-06-29T18:37:38.053824Z","shell.execute_reply":"2025-06-29T18:37:41.914057Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"       id             model_a              model_b  \\\n0   30192  gpt-4-1106-preview           gpt-4-0613   \n1   53567           koala-13b           gpt-4-0613   \n2   65089  gpt-3.5-turbo-0613       mistral-medium   \n3   96401    llama-2-13b-chat  mistral-7b-instruct   \n4  198779           koala-13b   gpt-3.5-turbo-0314   \n\n                                              prompt  \\\n0  [\"Is it morally right to try to have a certain...   \n1  [\"What is the difference between marriage lice...   \n2  [\"explain function calling. how would you call...   \n3  [\"How can I create a test set for a very rare ...   \n4  [\"What is the best way to travel from Tel-Aviv...   \n\n                                          response_a  \\\n0  [\"The question of whether it is morally right ...   \n1  [\"A marriage license is a legal document that ...   \n2  [\"Function calling is the process of invoking ...   \n3  [\"Creating a test set for a very rare category...   \n4  [\"The best way to travel from Tel Aviv to Jeru...   \n\n                                          response_b  winner_model_a  \\\n0  [\"As an AI, I don't have personal beliefs or o...               1   \n1  [\"A marriage license and a marriage certificat...               0   \n2  [\"Function calling is the process of invoking ...               0   \n3  [\"When building a classifier for a very rare c...               1   \n4  [\"The best way to travel from Tel-Aviv to Jeru...               0   \n\n   winner_model_b  winner_tie  \n0               0           0  \n1               1           0  \n2               0           1  \n3               0           0  \n4               1           0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>model_a</th>\n      <th>model_b</th>\n      <th>prompt</th>\n      <th>response_a</th>\n      <th>response_b</th>\n      <th>winner_model_a</th>\n      <th>winner_model_b</th>\n      <th>winner_tie</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>30192</td>\n      <td>gpt-4-1106-preview</td>\n      <td>gpt-4-0613</td>\n      <td>[\"Is it morally right to try to have a certain...</td>\n      <td>[\"The question of whether it is morally right ...</td>\n      <td>[\"As an AI, I don't have personal beliefs or o...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53567</td>\n      <td>koala-13b</td>\n      <td>gpt-4-0613</td>\n      <td>[\"What is the difference between marriage lice...</td>\n      <td>[\"A marriage license is a legal document that ...</td>\n      <td>[\"A marriage license and a marriage certificat...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>65089</td>\n      <td>gpt-3.5-turbo-0613</td>\n      <td>mistral-medium</td>\n      <td>[\"explain function calling. how would you call...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>[\"Function calling is the process of invoking ...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>96401</td>\n      <td>llama-2-13b-chat</td>\n      <td>mistral-7b-instruct</td>\n      <td>[\"How can I create a test set for a very rare ...</td>\n      <td>[\"Creating a test set for a very rare category...</td>\n      <td>[\"When building a classifier for a very rare c...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>198779</td>\n      <td>koala-13b</td>\n      <td>gpt-3.5-turbo-0314</td>\n      <td>[\"What is the best way to travel from Tel-Aviv...</td>\n      <td>[\"The best way to travel from Tel Aviv to Jeru...</td>\n      <td>[\"The best way to travel from Tel-Aviv to Jeru...</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"# Input: pandas object of the same size as the og column\n\ndef batch_clean_text(texts):\n    cleaned_all = []\n\n    for doc in nlp.pipe(texts, batch_size=64):\n        tokens = []\n        for token in doc:\n            is_valid = (\n                not token.is_stop and\n                token.is_alpha and\n                len(token) >2\n            )\n            if is_valid:\n                tokens.append(token.lemma_)\n                \n        cleaned_all.append(\" \".join(tokens))\n    \n    return cleaned_all","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T18:37:41.915417Z","iopub.execute_input":"2025-06-29T18:37:41.915634Z","iopub.status.idle":"2025-06-29T18:37:41.920403Z","shell.execute_reply.started":"2025-06-29T18:37:41.915616Z","shell.execute_reply":"2025-06-29T18:37:41.919625Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"# Clean text\nspacy.require_gpu()\nnlp = spacy.load(\"en_core_web_sm\", disable=[\"parser\", \"ner\"])\nstr_cols = ['prompt', 'response_a', 'response_b']\n\nfor col in str_cols:\n    train_df[col] = batch_clean_text(train_df[col].astype(str).str.lower())\n    test_df[col] = batch_clean_text(test_df[col].astype(str).str.lower())\n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T18:37:41.921226Z","iopub.execute_input":"2025-06-29T18:37:41.921495Z","iopub.status.idle":"2025-06-29T18:54:16.084810Z","shell.execute_reply.started":"2025-06-29T18:37:41.921473Z","shell.execute_reply":"2025-06-29T18:54:16.084224Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"def embed_text(df_col, model):\n    sentences = df_col.tolist()\n    embeddings = model.encode(sentences, convert_to_numpy=True, show_progress_bar=True)\n    return list(embeddings)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T18:54:16.085575Z","iopub.execute_input":"2025-06-29T18:54:16.085796Z","iopub.status.idle":"2025-06-29T18:54:16.089676Z","shell.execute_reply.started":"2025-06-29T18:54:16.085779Z","shell.execute_reply":"2025-06-29T18:54:16.089054Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"def joint_embed_text(prompt_col, resp_col, model, sep=\"[SEP]\"):\n    sentences = (prompt_col + f\" {sep} \" + resp_col).tolist()\n    embeddings = model.encode(sentences, convert_to_numpy=True, show_progress_bar=True)\n    return list(embeddings)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T18:54:16.091570Z","iopub.execute_input":"2025-06-29T18:54:16.091803Z","iopub.status.idle":"2025-06-29T18:54:16.100912Z","shell.execute_reply.started":"2025-06-29T18:54:16.091787Z","shell.execute_reply":"2025-06-29T18:54:16.100261Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"# Embed text\nmodel_path = '/kaggle/input/sentencetransformer'\nsbert = SentenceTransformer(model_path)\n\nfor col in str_cols:\n    train_df[col + '_embedded'] = embed_text(train_df[col], sbert)\n    test_df[col + '_embedded'] = embed_text(test_df[col], sbert)\n\n# Perform joint embeddings\ntrain_df['prompt_resp_a_embeded'] = joint_embed_text(train_df['prompt'], train_df['response_a'], sbert)\ntrain_df['prompt_resp_b_embeded'] = joint_embed_text(train_df['prompt'], train_df['response_b'], sbert)\ntest_df['prompt_resp_a_embeded'] = joint_embed_text(test_df['prompt'], test_df['response_a'], sbert)\ntest_df['prompt_resp_b_embeded'] = joint_embed_text(test_df['prompt'], test_df['response_b'], sbert)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T18:54:16.101560Z","iopub.execute_input":"2025-06-29T18:54:16.101751Z","iopub.status.idle":"2025-06-29T19:00:20.816838Z","shell.execute_reply.started":"2025-06-29T18:54:16.101736Z","shell.execute_reply":"2025-06-29T19:00:20.816018Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Batches:   0%|          | 0/1797 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ad0f2f8f881543ff9712fadfb8dc88ff"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Batches:   0%|          | 0/1 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"8505cef6200d487bb4c38d5899851d51"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Batches:   0%|          | 0/1797 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ff1a97e35b064c679a25f4cd505f6b33"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Batches:   0%|          | 0/1 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9d9874ebf2ee4d83afb0dbd4d3b73acc"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Batches:   0%|          | 0/1797 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"19cca089ece44f5b8c1c51a1eb460050"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Batches:   0%|          | 0/1 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"44c3e3a6796b4834a1bdbedccc6e89e8"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Batches:   0%|          | 0/1797 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6a043ca803b84ba781e184b31ab56082"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Batches:   0%|          | 0/1797 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e54fcfaf1a3a4fd3bd3cfc438ca73467"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Batches:   0%|          | 0/1 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"59c18077c2a54195abbc2c5631bbdb30"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Batches:   0%|          | 0/1 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"77132bbb70a54bf9a37a501f2a08be5a"}},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"def calculate_similarity(col1, col2):\n    a = np.vstack(col1.to_numpy())\n    b = np.vstack(col2.to_numpy())\n    sim = cosine_similarity(a, b)\n    sim_final = np.diag(sim)\n\n    abs_diff = np.abs(a - b).mean(axis=1)\n    \n    return sim_final, abs_diff","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T19:00:20.817665Z","iopub.execute_input":"2025-06-29T19:00:20.817934Z","iopub.status.idle":"2025-06-29T19:00:20.821998Z","shell.execute_reply.started":"2025-06-29T19:00:20.817907Z","shell.execute_reply":"2025-06-29T19:00:20.821413Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"def new_col_name(col1, col2):\n    new_col1 = col1.replace('_embedded','')\n    new_col2 = col2.replace('_embedded','')\n    col_name = f'_{new_col1}_{new_col2}'\n\n    return col_name","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T19:00:20.822698Z","iopub.execute_input":"2025-06-29T19:00:20.822961Z","iopub.status.idle":"2025-06-29T19:00:20.835242Z","shell.execute_reply.started":"2025-06-29T19:00:20.822938Z","shell.execute_reply":"2025-06-29T19:00:20.834493Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"# Add columns with cosine similarity and abs difference\ncol_pairs = [['prompt_embedded', 'response_a_embedded'],\n             ['prompt_embedded', 'response_b_embedded'],\n             ['response_a_embedded', 'response_b_embedded']\n            ]\n\nfor col1, col2 in col_pairs:\n    col_name = new_col_name(col1,col2)\n    train_df[f'sim{col_name}'], train_df[f'abs_diff{col_name}'] = calculate_similarity(train_df[col1], train_df[col2])\n    test_df[f'sim{col_name}'], test_df[f'abs_diff{col_name}'] = calculate_similarity(test_df[col1], test_df[col2])\n    ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T19:00:20.836032Z","iopub.execute_input":"2025-06-29T19:00:20.836232Z","iopub.status.idle":"2025-06-29T19:00:53.353678Z","shell.execute_reply.started":"2025-06-29T19:00:20.836212Z","shell.execute_reply":"2025-06-29T19:00:53.353087Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"def make_feature_matrix(df, col_names):\n    feature_matrix = pd.DataFrame()\n    for icol in col_names:\n        if isinstance(df[icol].iloc[0], (np.ndarray, list)) and len(df[icol].iloc[0]) > 1:\n            # pack vectors out \n            vectors = np.vstack(df[icol].to_numpy())\n            # create a mini df of them\n            new_df = pd.DataFrame(vectors, columns=[f'{icol}_{i}' for i in range(vectors.shape[1])])\n\n            feature_matrix = pd.concat([feature_matrix, new_df], axis=1)\n        else:\n            feature_matrix[icol] = df[icol].to_numpy()\n            \n    return feature_matrix","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T19:00:53.354440Z","iopub.execute_input":"2025-06-29T19:00:53.354659Z","iopub.status.idle":"2025-06-29T19:00:53.359982Z","shell.execute_reply.started":"2025-06-29T19:00:53.354642Z","shell.execute_reply":"2025-06-29T19:00:53.359222Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"# Prepare training and test data\ncols_to_include = ['response_a_embedded', 'response_b_embedded', \n                   'prompt_resp_a_embeded', 'prompt_resp_b_embeded',\n                  'sim_prompt_response_a', 'sim_prompt_response_b',\n                  'abs_diff_prompt_response_a', 'abs_diff_prompt_response_b',\n                  'sim_response_a_response_b', 'abs_diff_response_a_response_b']\n\nX_train = make_feature_matrix(train_df, cols_to_include)\nX_test = make_feature_matrix(test_df, cols_to_include)\n\ny_df = train_df[['winner_model_a', 'winner_model_b','winner_tie']].copy()\ny_train = np.argmax(y_df.to_numpy(), axis=1) # model_a: 0, model_b: 1, tie: 2\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T19:00:53.360749Z","iopub.execute_input":"2025-06-29T19:00:53.360907Z","iopub.status.idle":"2025-06-29T19:00:54.648529Z","shell.execute_reply.started":"2025-06-29T19:00:53.360895Z","shell.execute_reply":"2025-06-29T19:00:54.647606Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"train_df.to_csv('train_df.csv')\ntest_df.to_csv('test_df.csv')\nX_train.to_csv('X_train.csv')\n#y_train.to_csv('y_train.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-29T19:00:54.649504Z","iopub.execute_input":"2025-06-29T19:00:54.650158Z","iopub.status.idle":"2025-06-29T19:11:30.116760Z","shell.execute_reply.started":"2025-06-29T19:00:54.650131Z","shell.execute_reply":"2025-06-29T19:11:30.115981Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"# Chech input data before running the model\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n\ntrain_df['label'] = y_train\n\nfig, axes = plt.subplots(1,2, sharey=True)\naxes[0].plot( range(0,384),train_df.loc[0,'response_a_embedded'])\naxes[1].plot( range(0,384),train_df.loc[0,'response_b_embedded'])\n\n\ntrain_df.drop(columns='label', inplace=True)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-27T18:11:58.244614Z","iopub.execute_input":"2025-06-27T18:11:58.245281Z","iopub.status.idle":"2025-06-27T18:11:58.487709Z","shell.execute_reply.started":"2025-06-27T18:11:58.245260Z","shell.execute_reply":"2025-06-27T18:11:58.487072Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"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\n"},"metadata":{}}],"execution_count":28},{"cell_type":"code","source":"# Train model\n# objective = multi:softprob --> out: predicted probability of each class\n# eval_metric = mlogloss\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import uniform, randint\n\nxgb = XGBClassifier(objective='multi:softprob', \n                    num_class=3, \n                    use_label_encoder=False, \n                    eval_metric='mlogloss',\n                    n_jobs=1,\n                    verbosity=2\n                   )\n\nparam_grid = {'max_depth': randint(3,6),\n              'learning_rate': uniform(0.01, 0.2),\n              'n_estimators': randint(100,300),\n              'colsample_bytree': uniform(0.6, 0.4)\n             }\n\nrandom_search = RandomizedSearchCV( estimator=xgb,\n                                  param_distributions= param_grid,\n                                  scoring=\"neg_log_loss\",\n                                  cv=5,\n                                  n_iter=10,\n                                  verbose=3,\n                                  random_state=42,\n                                  n_jobs=-1 \n                                  )\n# Fit the RSCV\nprint(\"Starting RandomizedSearchCV...\")\nrandom_search.fit(X_train, y_train)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T20:25:31.282485Z","iopub.status.idle":"2025-06-26T20:25:31.282729Z","shell.execute_reply.started":"2025-06-26T20:25:31.282619Z","shell.execute_reply":"2025-06-26T20:25:31.282630Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Inspect model\nbest_params = random_search.best_params_\nprint('Best hyperparameters:', best_params)\n\nbest_score = -random_search.best_score_\nprint('Best logloss score:', best_score)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T20:25:31.284223Z","iopub.status.idle":"2025-06-26T20:25:31.284496Z","shell.execute_reply.started":"2025-06-26T20:25:31.284379Z","shell.execute_reply":"2025-06-26T20:25:31.284392Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Predict test data\nbest_model = random_search.best_estimator_\nprobs = best_model.predict_proba(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T20:25:31.286247Z","iopub.status.idle":"2025-06-26T20:25:31.286507Z","shell.execute_reply.started":"2025-06-26T20:25:31.286396Z","shell.execute_reply":"2025-06-26T20:25:31.286408Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Prepare submission file\nto_submit = pd.DataFrame(probs, \n                         columns= ['winner_model_a', 'winner_model_b', 'winner_tie'], \n                         index= test_df['id'])\n\nto_submit.to_csv('submission.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T20:25:31.288068Z","iopub.status.idle":"2025-06-26T20:25:31.288347Z","shell.execute_reply.started":"2025-06-26T20:25:31.288218Z","shell.execute_reply":"2025-06-26T20:25:31.288233Z"}},"outputs":[],"execution_count":null}]}